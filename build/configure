#!/bin/bash

build_type="Release"

for opt
do

  arg=`expr "x$opt" : 'x[^=]*=\(.*\)'`

  case $opt in

    -h | --help)
      help=1
    ;;

    --enable-bullseye)
      if [ "$build_type" = "Debug" ]; then
          echo "Cannot build Bullseye if debug is enabled"
          exit 1
      fi
      build_type="Bullseye"
    ;;

    --enable-debug)
      if [ "$build_type" = "Bullseye" ]; then
          echo "Cannot build debug if Bullseye is enabled"
          exit 1
      fi
      build_type="Debug"
    ;;

    --enable-ulinux)
      if [ `uname` != "Linux" ]; then
          echo "Cannot build for ULINUX on non-Linux platforms"
          exit 1
      fi
      BUILD_RPM=1
      BUILD_DPKG=1
    ;;

    *)
      echo "configure: invalid option '$opt'"
      echo "Try configure --help' for more information."
      exit 1
    ;;

  esac

done

if [ "$help" = "1" ]; then

    cat<<EOF

Usage: ./configure [OPTIONS]

OVERVIEW:

This script configures SCXPAL for building. Type the following commands.

    $ ./configure
    $ make

OPTIONS:
    -h, --help                  Print this help message.
    --enable-bullseye           Enables the use of code coverage tools (Bullseye).
    --enable-debug              Perform a debug build.
    --enable-ulinux             Specifies platform as ULINUX (Linux only).

EOF
    exit 0
fi

uname=`uname`
case $uname in
    Linux)
	ULINUX=1

        PF=Linux
	PF_MAJOR=1
	PF_MINOR=0
        PKG_SUFFIX=rpm
	PF_DISTRO=ULINUX

	if [ -e /usr/bin/dpkg ]; then
	    BUILD_DPKG=1
	    PKG_SUFFIX=deb
	elif [ -e /usr/bin/rpmbuild ]; then
	    BUILD_RPM=1
	fi

        case `uname -m` in
	    # ARCH is only used for OMS to determine the correct ruby folder
	    ppc64*)
		PF_ARCH=ppc
		ARCH=ppc
	    ;;
            *64*)
                PF_ARCH=x64
                ARCH=x64
            ;;
            *86*)
                PF_ARCH=x86
                ARCH=ia32
            ;;
            *athlon*)
                PF_ARCH=x86
                ARCH=ia32
            ;;
            *)
                PF_ARCH=UNKNOWN
                ARCH=UNKNOWN
            ;;
        esac

        if [ "$PF_ARCH" = "x86" ]; then
            PF_WIDTH=32
        else
            PF_WIDTH=64
        fi
    ;;

    SunOS)
        PF=SunOS
        PKG_SUFFIX=pkg
        uname_r=`uname -r`
        PF_MAJOR=`echo $uname_r | awk -F. '{print $1}'`
        PF_MINOR=`echo $uname_r | awk -F. '{print $2}'`
        uname_p=`uname -p`
        if [ "$uname_p" = "sparc" ]; then
            PF_ARCH=sparc
            ARCH=sparc
        elif [ "$uname_p" = "i386" ]; then
            PF_ARCH=x86
            ARCH=ia32
        else
            PF_ARCH=UNKNOWN
            ARCH=UNKNOWN
        fi
        PF_WIDTH=32
    ;;

    HP-UX)
        PF=HPUX
        PKG_SUFFIX=depot
        uname_r=`uname -r`
        PF_MAJOR=`echo $uname_r | awk -F. '{print $2}'`
        PF_MINOR=`echo $uname_r | awk -F. '{print $3}'`
        if [ `uname -m` = "ia64" ]; then
            PF_ARCH=ia64
            ARCH=ia64
        else
            PF_ARCH=pa-risc
            ARCH=hppa
        fi
        PF_WIDTH=32
    ;;

    AIX)
        PF=AIX
        PKG_SUFFIX=lpp
        PF_MAJOR=`uname -v`
        PF_MINOR=`uname -r`
        PF_ARCH=ppc
        ARCH=ppc
        PF_WIDTH=32
    ;;

esac

##==============================================================================
##
## running on Travis?
##
##==============================================================================

travis_ci=0
if [ "$TRAVIS" = "true" ]; then
    echo "Currently running on Travis for Continuous Integration ..."
    travis_ci=1
fi

##==============================================================================
##
## handle build settings and write configuration
##
##==============================================================================

if [ "$uname" = "Linux" ]; then
    BUILD_CONFIGURATION=${PF}_${PF_DISTRO}_${PF_MAJOR}.${PF_MINOR}_${PF_ARCH}_${PF_WIDTH}_${build_type}
else
    BUILD_CONFIGURATION=${PF}_${PF_MAJOR}.${PF_MINOR}_${PF_ARCH}_${PF_WIDTH}_${build_type}
fi

cat <<EOF > config.mak
BUILD_TYPE=$build_type
BUILD_PROFILING=false
SCX_STACK_ONLY=false
UNITTESTS_SUBSET=
PF=$PF
PF_MAJOR=$PF_MAJOR
PF_MINOR=$PF_MINOR
PF_ARCH=$PF_ARCH
ARCH=$ARCH
PF_WIDTH=$PF_WIDTH
PF_DISTRO=$PF_DISTRO
ULINUX=$ULINUX
BUILD_CONFIGURATION=$BUILD_CONFIGURATION
SCXPAL_INTERMEDIATE_DIR=`cd ..; pwd -P`/intermediate/$BUILD_CONFIGURATION
SCXPAL_TARGET_DIR=`cd ..; pwd -P`/target/$BUILD_CONFIGURATION
PACKAGE_SUFFIX=$PKG_SUFFIX
BUILD_RPM=$BUILD_RPM
BUILD_DPKG=$BUILD_DPKG
TRAVIS_CI=$travis_ci
EOF

echo "Configured SCXPAL for ${BUILD_CONFIGURATION}"
